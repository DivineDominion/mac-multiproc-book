# Preparing the Architecture {#architecture}

## A bit of Domain-driven Design Vocabulary Recap

## Bounded Contexts {#sec_boundedcontexts}

You can think of Bounded Context as the limit of your information's scope. When you have two Bounded Contexts, they don't know anything about each others internals. When both deal with Person objects, for example, both will model them differently. Both will have their own Domain Model.<!--ct: TODO add classic example of red DDD book-->

Our example app is simple. Its background process will deal with the Domain Model we have sketched already.

The two user interface applications query the background process like a server. They obtain data and have to make sense of it. Will they use the same Domain Model? 

Pro
:   both talk about boxes and items in a similar fashion, so you could say they have the same understanding and thus can use the same model
:   the super-simple Entities allow for similar representation

Con
:   apps don't have direct write-acceess to the domain and shouldn't be fooled otherwise: we need a read-only model for the user-facing apps

<!--ct: TODO make table of this comparison-->


## Aggregates

## Sharing Data and Eventual Consistency

## Design for concurrency

### Don't expect immediate responses

* calls accross the XPC connection should be non-blocking
    * the app should stay responsive to user interaction
    * the helper should stay responsive to further requests
* favor commands and react to callbacks, taking a delay into account
    * instead of asking the helper for a BoxId to create stuff on the client side, command it to create a Box and wait for the response
    * if you want to give immediate feedback to the user, create a temporary view component and command the service to create a Box for a given temporary identifier and incorporate the changes later (isn't this much like a real identifier already? only benefit: it's vended this side of the connection)
